import numpy as np

class Perceptron:
    def __init__(self, num_inputs):
        self.weights = np.zeros(num_inputs + 1)  # Inicializar los pesos a cero
        self.learning_rate = 0.1  # Tasa de aprendizaje

    def predict(self, inputs):
        summation = np.dot(inputs, self.weights[1:]) + self.weights[0]  # Suma ponderada de entradas y pesos
        return 1 if summation >= 0 else 0  # Funci贸n de activaci贸n (umbral)

    def train(self, training_inputs, labels, epochs):
        for _ in range(epochs):
            for inputs, label in zip(training_inputs, labels):
                prediction = self.predict(inputs)
                self.weights[1:] += self.learning_rate * (label - prediction) * inputs  # Actualizar los pesos
                self.weights[0] += self.learning_rate * (label - prediction)  # Actualizar el sesgo


# Ejemplo de entrenamiento y prueba del perceptr贸n
training_inputs = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
labels = np.array([0, 0, 0, 1])

perceptron = Perceptron(num_inputs=2)
perceptron.train(training_inputs, labels, epochs=10)

# Realizar predicciones
test_inputs = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
for inputs in test_inputs:
    prediction = perceptron.predict(inputs)
    print(f'Entrada: {inputs} Predicci贸n: {prediction}')
